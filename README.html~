<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">

<head>
<title>README.html</title>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>

</head>

<body>

<h1>Proyecto Pluviómetro</h1>

<p><strong>autor: Luis Gómez</strong></p>

<p>Este proyecto implementa un pluviómetro utilizando la plataforma MBED y sobre un integrado STM32 placa modelo NUCLEO F429ZI. El sistema mide la cantidad de lluvia mediante un sensor de tick y reporta la cantidad de lluvia acumulada a través de la comunicación serial.</p>

<h2>Descripción</h2>

<p>El sistema se compone de sensores para detectar la lluvia, un análisis de datos para acumular y reportar la cantidad de lluvia, y actuadores para indicar cuando se ha detectado lluvia.</p>

<p><img src="doc/fig/pluviometro.png" alt="Figura 1: Esquema de un pluviómetro de balancín (fuente. Segerer et al., 2006)
" title="" /></p>

<p><strong>Figura 1:</strong> <em>Esquema de un pluviómetro de balancín (fuente. Segerer et al., 2006)</em></p>

<h2>Estructura de componentes</h2>

<p><img src="doc/fig/esquema_periferico_pluviometro.jpg" alt="Figura 2: Esquema componentes pluviómetro
" title="" />
<strong>Figura 2:</strong> Esquema componentes pluviómetro</p>

<h2>Estructura del Código</h2>

<h3>Sensores</h3>

<ul>
<li><strong>initializeSensors()</strong>: Inicializa los sensores configurando el modo del botón de detección de lluvia y apagando los LEDs.</li>
<li><strong>isRaining()</strong>: Verifica si está lloviendo comprobando el estado del botón de detección de lluvia.</li>
</ul>

<h3>Análisis de Datos</h3>

<ul>
<li><strong>analyzeRainfall()</strong>: Analiza la lluvia detectada, imprime la hora actual y acumula la cantidad de lluvia detectada.</li>
<li><strong>accumulateRainfall()</strong>: Incrementa el contador de lluvia.</li>
<li><strong>hasTimePassedMinutesRTC(int minutes)</strong>: Verifica si ha pasado el tiempo especificado en minutos desde la última comprobación.</li>
</ul>

<h3>Actuación</h3>

<ul>
<li><strong>actOnRainfall()</strong>: Enciende los LEDs de alarma y tick, y analiza la lluvia detectada.</li>
<li><strong>reportRainfall()</strong>: Imprime la cantidad de lluvia acumulada y resetea el contador de lluvia.</li>
<li><strong>printRain(const char* buffer)</strong>: Imprime un mensaje indicando que se ha detectado lluvia.</li>
<li><strong>DateTimeNow()</strong>: Obtiene la fecha y hora actual en formato <code>"%Y-%m-%d %H:%M:%S"</code>.</li>
<li><strong>printAccumulatedRainfall()</strong>: Imprime la cantidad de lluvia acumulada en el formato <code>"YYYY-MM-DD HH:MM - Accumulated rainfall: X.XX mm"</code>.</li>
</ul>

<h2>Componentes Utilizados</h2>

<h3> </h3>

<h2>Uso</h2>

<h3>Requisitos</h3>

<ul>
<li>Placa compatible con MBED</li>
<li>Sensor de lluvia (tick)</li>
<li>LEDs para indicaciones</li>
<li>Comunicación serial configurada</li>
</ul>

<h3>Configuración</h3>

<ol>
<li>Clonar el repositorio en tu entorno de desarrollo MBED.</li>
<li>Compilar y cargar el código en tu placa MBED.</li>
<li>Conectar los componentes de hardware (sensor de lluvia, LEDs, etc.) a la placa MBED según el esquema del proyecto.</li>
</ol>

<h3>Ejecución</h3>

<ol>
<li>Inicializar los sensores llamando a la función <code>initializeSensors()</code>.</li>
<li>El programa principal ejecutará un bucle infinito que:
<ul>
<li>Detectará si está lloviendo y actuará en consecuencia.</li>
<li>Verificará a intervalos regulares la cantidad de lluvia acumulada y la reportará.</li>
</ul></li>
</ol>

<h3>Ejemplo de Salida UART</h3>

<p>```plaintext
2024-07-01 12:00:00 - Rain detected
2024-07-01 12:01 - Accumulated rainfall: 0.20 mm</p>

</body>
</html>
